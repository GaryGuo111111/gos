<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.taimei.gos.mapper.UserWalletLogMapper">
  <resultMap id="BaseResultMap" type="com.taimei.gos.model.UserWalletLog">
    <id column="wallet_log_id" jdbcType="INTEGER" property="walletLogId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="before_amount" jdbcType="BIGINT" property="beforeAmount" />
    <result column="amount" jdbcType="BIGINT" property="amount" />
    <result column="after_amount" jdbcType="BIGINT" property="afterAmount" />
    <result column="field" jdbcType="VARCHAR" property="field" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="type_alias_id" jdbcType="INTEGER" property="typeAliasId" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="create_time" jdbcType="INTEGER" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    wallet_log_id, user_id, before_amount, amount, after_amount, field, remark, type_alias_id, 
    type, create_time
  </sql>
  <select id="selectByExample" parameterType="com.taimei.gos.model.UserWalletLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_wallet_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_wallet_log
    where wallet_log_id = #{walletLogId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user_wallet_log
    where wallet_log_id = #{walletLogId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.taimei.gos.model.UserWalletLogExample">
    delete from user_wallet_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.taimei.gos.model.UserWalletLog">
    insert into user_wallet_log (wallet_log_id, user_id, before_amount, 
      amount, after_amount, field, 
      remark, type_alias_id, type, 
      create_time)
    values (#{walletLogId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{beforeAmount,jdbcType=BIGINT}, 
      #{amount,jdbcType=BIGINT}, #{afterAmount,jdbcType=BIGINT}, #{field,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR}, #{typeAliasId,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, 
      #{createTime,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.taimei.gos.model.UserWalletLog">
    insert into user_wallet_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="walletLogId != null">
        wallet_log_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="beforeAmount != null">
        before_amount,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="afterAmount != null">
        after_amount,
      </if>
      <if test="field != null">
        field,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="typeAliasId != null">
        type_alias_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="walletLogId != null">
        #{walletLogId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="beforeAmount != null">
        #{beforeAmount,jdbcType=BIGINT},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=BIGINT},
      </if>
      <if test="afterAmount != null">
        #{afterAmount,jdbcType=BIGINT},
      </if>
      <if test="field != null">
        #{field,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="typeAliasId != null">
        #{typeAliasId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.taimei.gos.model.UserWalletLogExample" resultType="java.lang.Long">
    select count(*) from user_wallet_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_wallet_log
    <set>
      <if test="record.walletLogId != null">
        wallet_log_id = #{record.walletLogId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.beforeAmount != null">
        before_amount = #{record.beforeAmount,jdbcType=BIGINT},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=BIGINT},
      </if>
      <if test="record.afterAmount != null">
        after_amount = #{record.afterAmount,jdbcType=BIGINT},
      </if>
      <if test="record.field != null">
        field = #{record.field,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.typeAliasId != null">
        type_alias_id = #{record.typeAliasId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_wallet_log
    set wallet_log_id = #{record.walletLogId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      before_amount = #{record.beforeAmount,jdbcType=BIGINT},
      amount = #{record.amount,jdbcType=BIGINT},
      after_amount = #{record.afterAmount,jdbcType=BIGINT},
      field = #{record.field,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      type_alias_id = #{record.typeAliasId,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.taimei.gos.model.UserWalletLog">
    update user_wallet_log
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="beforeAmount != null">
        before_amount = #{beforeAmount,jdbcType=BIGINT},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=BIGINT},
      </if>
      <if test="afterAmount != null">
        after_amount = #{afterAmount,jdbcType=BIGINT},
      </if>
      <if test="field != null">
        field = #{field,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="typeAliasId != null">
        type_alias_id = #{typeAliasId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=INTEGER},
      </if>
    </set>
    where wallet_log_id = #{walletLogId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.taimei.gos.model.UserWalletLog">
    update user_wallet_log
    set user_id = #{userId,jdbcType=INTEGER},
      before_amount = #{beforeAmount,jdbcType=BIGINT},
      amount = #{amount,jdbcType=BIGINT},
      after_amount = #{afterAmount,jdbcType=BIGINT},
      field = #{field,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      type_alias_id = #{typeAliasId,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=INTEGER}
    where wallet_log_id = #{walletLogId,jdbcType=INTEGER}
  </update>
</mapper>