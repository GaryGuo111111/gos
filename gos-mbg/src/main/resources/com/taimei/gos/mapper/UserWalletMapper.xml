<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.taimei.gos.mapper.UserWalletMapper">
  <resultMap id="BaseResultMap" type="com.taimei.gos.model.UserWallet">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="balance" jdbcType="BIGINT" property="balance" />
    <result column="non_withdraw" jdbcType="BIGINT" property="nonWithdraw" />
    <result column="bean" jdbcType="INTEGER" property="bean" />
    <result column="coupon" jdbcType="INTEGER" property="coupon" />
    <result column="total_profit" jdbcType="BIGINT" property="totalProfit" />
    <result column="withdraw_profit" jdbcType="BIGINT" property="withdrawProfit" />
    <result column="sales_bonus" jdbcType="BIGINT" property="salesBonus" />
    <result column="order_performance" jdbcType="BIGINT" property="orderPerformance" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_id, balance, non_withdraw, bean, coupon, total_profit, withdraw_profit, sales_bonus, 
    order_performance
  </sql>
  <select id="selectByExample" parameterType="com.taimei.gos.model.UserWalletExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_wallet
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_wallet
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user_wallet
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.taimei.gos.model.UserWalletExample">
    delete from user_wallet
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.taimei.gos.model.UserWallet">
    insert into user_wallet (user_id, balance, non_withdraw, 
      bean, coupon, total_profit, 
      withdraw_profit, sales_bonus, order_performance
      )
    values (#{userId,jdbcType=INTEGER}, #{balance,jdbcType=BIGINT}, #{nonWithdraw,jdbcType=BIGINT}, 
      #{bean,jdbcType=INTEGER}, #{coupon,jdbcType=INTEGER}, #{totalProfit,jdbcType=BIGINT}, 
      #{withdrawProfit,jdbcType=BIGINT}, #{salesBonus,jdbcType=BIGINT}, #{orderPerformance,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.taimei.gos.model.UserWallet">
    insert into user_wallet
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="balance != null">
        balance,
      </if>
      <if test="nonWithdraw != null">
        non_withdraw,
      </if>
      <if test="bean != null">
        bean,
      </if>
      <if test="coupon != null">
        coupon,
      </if>
      <if test="totalProfit != null">
        total_profit,
      </if>
      <if test="withdrawProfit != null">
        withdraw_profit,
      </if>
      <if test="salesBonus != null">
        sales_bonus,
      </if>
      <if test="orderPerformance != null">
        order_performance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=BIGINT},
      </if>
      <if test="nonWithdraw != null">
        #{nonWithdraw,jdbcType=BIGINT},
      </if>
      <if test="bean != null">
        #{bean,jdbcType=INTEGER},
      </if>
      <if test="coupon != null">
        #{coupon,jdbcType=INTEGER},
      </if>
      <if test="totalProfit != null">
        #{totalProfit,jdbcType=BIGINT},
      </if>
      <if test="withdrawProfit != null">
        #{withdrawProfit,jdbcType=BIGINT},
      </if>
      <if test="salesBonus != null">
        #{salesBonus,jdbcType=BIGINT},
      </if>
      <if test="orderPerformance != null">
        #{orderPerformance,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.taimei.gos.model.UserWalletExample" resultType="java.lang.Long">
    select count(*) from user_wallet
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_wallet
    <set>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.balance != null">
        balance = #{record.balance,jdbcType=BIGINT},
      </if>
      <if test="record.nonWithdraw != null">
        non_withdraw = #{record.nonWithdraw,jdbcType=BIGINT},
      </if>
      <if test="record.bean != null">
        bean = #{record.bean,jdbcType=INTEGER},
      </if>
      <if test="record.coupon != null">
        coupon = #{record.coupon,jdbcType=INTEGER},
      </if>
      <if test="record.totalProfit != null">
        total_profit = #{record.totalProfit,jdbcType=BIGINT},
      </if>
      <if test="record.withdrawProfit != null">
        withdraw_profit = #{record.withdrawProfit,jdbcType=BIGINT},
      </if>
      <if test="record.salesBonus != null">
        sales_bonus = #{record.salesBonus,jdbcType=BIGINT},
      </if>
      <if test="record.orderPerformance != null">
        order_performance = #{record.orderPerformance,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_wallet
    set user_id = #{record.userId,jdbcType=INTEGER},
      balance = #{record.balance,jdbcType=BIGINT},
      non_withdraw = #{record.nonWithdraw,jdbcType=BIGINT},
      bean = #{record.bean,jdbcType=INTEGER},
      coupon = #{record.coupon,jdbcType=INTEGER},
      total_profit = #{record.totalProfit,jdbcType=BIGINT},
      withdraw_profit = #{record.withdrawProfit,jdbcType=BIGINT},
      sales_bonus = #{record.salesBonus,jdbcType=BIGINT},
      order_performance = #{record.orderPerformance,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.taimei.gos.model.UserWallet">
    update user_wallet
    <set>
      <if test="balance != null">
        balance = #{balance,jdbcType=BIGINT},
      </if>
      <if test="nonWithdraw != null">
        non_withdraw = #{nonWithdraw,jdbcType=BIGINT},
      </if>
      <if test="bean != null">
        bean = #{bean,jdbcType=INTEGER},
      </if>
      <if test="coupon != null">
        coupon = #{coupon,jdbcType=INTEGER},
      </if>
      <if test="totalProfit != null">
        total_profit = #{totalProfit,jdbcType=BIGINT},
      </if>
      <if test="withdrawProfit != null">
        withdraw_profit = #{withdrawProfit,jdbcType=BIGINT},
      </if>
      <if test="salesBonus != null">
        sales_bonus = #{salesBonus,jdbcType=BIGINT},
      </if>
      <if test="orderPerformance != null">
        order_performance = #{orderPerformance,jdbcType=BIGINT},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.taimei.gos.model.UserWallet">
    update user_wallet
    set balance = #{balance,jdbcType=BIGINT},
      non_withdraw = #{nonWithdraw,jdbcType=BIGINT},
      bean = #{bean,jdbcType=INTEGER},
      coupon = #{coupon,jdbcType=INTEGER},
      total_profit = #{totalProfit,jdbcType=BIGINT},
      withdraw_profit = #{withdrawProfit,jdbcType=BIGINT},
      sales_bonus = #{salesBonus,jdbcType=BIGINT},
      order_performance = #{orderPerformance,jdbcType=BIGINT}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
</mapper>