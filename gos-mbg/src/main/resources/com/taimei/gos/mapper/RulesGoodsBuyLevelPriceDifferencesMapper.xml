<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.taimei.gos.mapper.RulesGoodsBuyLevelPriceDifferencesMapper">
  <resultMap id="BaseResultMap" type="com.taimei.gos.model.RulesGoodsBuyLevelPriceDifferences">
    <id column="level_price_id" jdbcType="INTEGER" property="levelPriceId" />
    <result column="goods_id" jdbcType="INTEGER" property="goodsId" />
    <result column="buy_level_id" jdbcType="INTEGER" property="buyLevelId" />
    <result column="user_price" jdbcType="BIGINT" property="userPrice" />
    <result column="create_time" jdbcType="INTEGER" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    level_price_id, goods_id, buy_level_id, user_price, create_time
  </sql>
  <select id="selectByExample" parameterType="com.taimei.gos.model.RulesGoodsBuyLevelPriceDifferencesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from rules_goods_buy_level_price_differences
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from rules_goods_buy_level_price_differences
    where level_price_id = #{levelPriceId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from rules_goods_buy_level_price_differences
    where level_price_id = #{levelPriceId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.taimei.gos.model.RulesGoodsBuyLevelPriceDifferencesExample">
    delete from rules_goods_buy_level_price_differences
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.taimei.gos.model.RulesGoodsBuyLevelPriceDifferences">
    insert into rules_goods_buy_level_price_differences (level_price_id, goods_id, buy_level_id, 
      user_price, create_time)
    values (#{levelPriceId,jdbcType=INTEGER}, #{goodsId,jdbcType=INTEGER}, #{buyLevelId,jdbcType=INTEGER}, 
      #{userPrice,jdbcType=BIGINT}, #{createTime,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.taimei.gos.model.RulesGoodsBuyLevelPriceDifferences">
    insert into rules_goods_buy_level_price_differences
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="levelPriceId != null">
        level_price_id,
      </if>
      <if test="goodsId != null">
        goods_id,
      </if>
      <if test="buyLevelId != null">
        buy_level_id,
      </if>
      <if test="userPrice != null">
        user_price,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="levelPriceId != null">
        #{levelPriceId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null">
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="buyLevelId != null">
        #{buyLevelId,jdbcType=INTEGER},
      </if>
      <if test="userPrice != null">
        #{userPrice,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.taimei.gos.model.RulesGoodsBuyLevelPriceDifferencesExample" resultType="java.lang.Long">
    select count(*) from rules_goods_buy_level_price_differences
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update rules_goods_buy_level_price_differences
    <set>
      <if test="record.levelPriceId != null">
        level_price_id = #{record.levelPriceId,jdbcType=INTEGER},
      </if>
      <if test="record.goodsId != null">
        goods_id = #{record.goodsId,jdbcType=INTEGER},
      </if>
      <if test="record.buyLevelId != null">
        buy_level_id = #{record.buyLevelId,jdbcType=INTEGER},
      </if>
      <if test="record.userPrice != null">
        user_price = #{record.userPrice,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update rules_goods_buy_level_price_differences
    set level_price_id = #{record.levelPriceId,jdbcType=INTEGER},
      goods_id = #{record.goodsId,jdbcType=INTEGER},
      buy_level_id = #{record.buyLevelId,jdbcType=INTEGER},
      user_price = #{record.userPrice,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.taimei.gos.model.RulesGoodsBuyLevelPriceDifferences">
    update rules_goods_buy_level_price_differences
    <set>
      <if test="goodsId != null">
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="buyLevelId != null">
        buy_level_id = #{buyLevelId,jdbcType=INTEGER},
      </if>
      <if test="userPrice != null">
        user_price = #{userPrice,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=INTEGER},
      </if>
    </set>
    where level_price_id = #{levelPriceId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.taimei.gos.model.RulesGoodsBuyLevelPriceDifferences">
    update rules_goods_buy_level_price_differences
    set goods_id = #{goodsId,jdbcType=INTEGER},
      buy_level_id = #{buyLevelId,jdbcType=INTEGER},
      user_price = #{userPrice,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=INTEGER}
    where level_price_id = #{levelPriceId,jdbcType=INTEGER}
  </update>
</mapper>